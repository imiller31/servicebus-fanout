syntax = "proto3";

package protos;

import "google/protobuf/any.proto";

option go_package = "github.com/imiller31/servicebus-fanout/protos";

// The stream manager accepts requests from many clients to create bi-directional streams
// between the client and the stream manager. The stream manager will then forward messages
// to the appropriate stream based on the TargetLeaf and TargetProcessor fields of the message.
service StreamService {
  // Naming is hard, this method allows a client to register a stream and get messages forwarded to it, it should respond
  // with the messageId and if an error occurred when the forwarded message is processed.
  rpc GetMessages (stream ClientRequest) returns (stream NotificationForwarderWrapper) {}
}

message ServiceBusMessage {
  string TargetLeaf = 1;
  string TargetProcessor = 2;
  string Message = 3;
  string Type = 4;
  string MessageId = 5;
}

// There is probably a way to leverage the Any type here, but the message is already serialized when we get it from SB
// it would be a waster of time to unmarshal it just to marshal it again.
message NotificationForwarderWrapper {
  bytes Data = 1;
  string MessageId = 2;
}

message ClientRequest {
  string ClientName = 1;
  string ClientType = 2;
  bool IsRegistration = 3;
  string MessageId = 4;
  Error Error = 5;
  google.protobuf.Any Response = 6;
}

message Error {
  string Message = 1;
  bool IsRetryable = 2;
}

// This response is sent from NotificationManager to the response topic to inform the original sender of message completion
message NotficationResponse {
  Error Error = 1;
  google.protobuf.Any Response = 2;
}