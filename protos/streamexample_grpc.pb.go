// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: streamexample.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	StreamService_GetMessages_FullMethodName = "/protos.StreamService/GetMessages"
)

// StreamServiceClient is the client API for StreamService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The stream manager accepts requests from many clients to create bi-directional streams
// between the client and the stream manager. The stream manager will then forward messages
// to the appropriate stream based on the TargetLeaf and TargetProcessor fields of the message.
type StreamServiceClient interface {
	// Naming is hard, this method allows a client to register a stream and get messages forwarded to it, it should respond
	// with the messageId and if an error occurred when the forwarded message is processed.
	GetMessages(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ClientRequest, NotificationForwarderWrapper], error)
}

type streamServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStreamServiceClient(cc grpc.ClientConnInterface) StreamServiceClient {
	return &streamServiceClient{cc}
}

func (c *streamServiceClient) GetMessages(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ClientRequest, NotificationForwarderWrapper], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &StreamService_ServiceDesc.Streams[0], StreamService_GetMessages_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ClientRequest, NotificationForwarderWrapper]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StreamService_GetMessagesClient = grpc.BidiStreamingClient[ClientRequest, NotificationForwarderWrapper]

// StreamServiceServer is the server API for StreamService service.
// All implementations must embed UnimplementedStreamServiceServer
// for forward compatibility.
//
// The stream manager accepts requests from many clients to create bi-directional streams
// between the client and the stream manager. The stream manager will then forward messages
// to the appropriate stream based on the TargetLeaf and TargetProcessor fields of the message.
type StreamServiceServer interface {
	// Naming is hard, this method allows a client to register a stream and get messages forwarded to it, it should respond
	// with the messageId and if an error occurred when the forwarded message is processed.
	GetMessages(grpc.BidiStreamingServer[ClientRequest, NotificationForwarderWrapper]) error
	mustEmbedUnimplementedStreamServiceServer()
}

// UnimplementedStreamServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedStreamServiceServer struct{}

func (UnimplementedStreamServiceServer) GetMessages(grpc.BidiStreamingServer[ClientRequest, NotificationForwarderWrapper]) error {
	return status.Errorf(codes.Unimplemented, "method GetMessages not implemented")
}
func (UnimplementedStreamServiceServer) mustEmbedUnimplementedStreamServiceServer() {}
func (UnimplementedStreamServiceServer) testEmbeddedByValue()                       {}

// UnsafeStreamServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StreamServiceServer will
// result in compilation errors.
type UnsafeStreamServiceServer interface {
	mustEmbedUnimplementedStreamServiceServer()
}

func RegisterStreamServiceServer(s grpc.ServiceRegistrar, srv StreamServiceServer) {
	// If the following call pancis, it indicates UnimplementedStreamServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&StreamService_ServiceDesc, srv)
}

func _StreamService_GetMessages_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StreamServiceServer).GetMessages(&grpc.GenericServerStream[ClientRequest, NotificationForwarderWrapper]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StreamService_GetMessagesServer = grpc.BidiStreamingServer[ClientRequest, NotificationForwarderWrapper]

// StreamService_ServiceDesc is the grpc.ServiceDesc for StreamService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StreamService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protos.StreamService",
	HandlerType: (*StreamServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetMessages",
			Handler:       _StreamService_GetMessages_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "streamexample.proto",
}
